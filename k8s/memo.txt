k8sはmicrok8sを使用して単独ホストで稼働させている。

$ sudo snap install microk8s --classic (1.20)
$ sudo usermod -a -G microk8s $USER
$ sudo chown -f -R $USER ~/.kub
$ microk8s start
$ microk8s enable dns registry storage metallb
metallb用のIPレンジに適切な範囲を設定 
    k8s稼働環境がDefault G/W:192.168.11.1
    CIDR:192.168.11.0/24 
    とかであれば、[192.168.11.110-192.168.11.130]など。

$ ./run.sh

$ microk8s kubectl get svc -l app=iris
NAME       TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)           AGE
iris-ext   LoadBalancer   10.152.183.29   192.168.11.110   52773:31262/TCP   6m24s
iris       ClusterIP      None            <none>           52773/TCP         6m24s
(iris-LoadBalancerなので公開IP付与。宛先は各irisのPODにラウンドロビンされる)
(irisはHeadless ServiceなのでCLUSTER-IPなし)

$ microk8s kubectl get pod -o wide
NAME        READY   STATUS    RESTARTS   AGE     IP             NODE     NOMINATED NODE   READINESS GATES
data-0   1/1     Running   0          2m59s   10.1.243.216   ubuntu   <none>           <none>
data-1   1/1     Running   0          2m54s   10.1.243.217   ubuntu   <none>           <none>

$ microk8s kubectl exec -it data-0 -- iris session iris

個別のPODにSMPアクセス
$ microk8s kubectl port-forward data-0 --address 0.0.0.0 52773:52773
http://192.168.11.49:52773/csp/sys/%25CSP.Portal.Home.zen SuperUser/SYS

停止、削除。Durable Sys, DBに使用したpvcも削除。
$ ./delete.sh

$ microk8s reset --destroy-storage
$ microk8s stop


ホスト名の確認方法
$ microk8s kubectl run -i --tty --image busybox:1.28 dns-test --restart=Never --rm

/ # nslookup data-0.iris  <=POD間通信で使用するホスト名
Server:    10.152.183.10
Address 1: 10.152.183.10 kube-dns.kube-system.svc.cluster.local

Name:      data-0.iris
Address 1: 10.1.243.216 data-0.iris.default.svc.cluster.local
/ #
/ #
/ # nslookup data-1.iris
Server:    10.152.183.10
Address 1: 10.152.183.10 kube-dns.kube-system.svc.cluster.local

Name:      data-1.iris
Address 1: 10.1.243.217 data-1.iris.default.svc.cluster.local
/ #
/ #
/ # nslookup iris
Server:    10.152.183.10
Address 1: 10.152.183.10 kube-dns.kube-system.svc.cluster.local

Name:      iris
Address 1: 10.1.243.229 10-1-243-229.iris-ext.default.svc.cluster.local
Address 2: 10.1.243.228 10-1-243-228.iris-ext.default.svc.cluster.local
/ #
/ #
/ # nslookup iris-ext
Server:    10.152.183.10
Address 1: 10.152.183.10 kube-dns.kube-system.svc.cluster.local

Name:      iris-ext
Address 1: 10.152.183.29 iris-ext.default.svc.cluster.local
/ #
$


DNSのテスト
https://hawksnowlog.blogspot.com/2019/05/how-to-use-k8s-statefulset.html

microk8s kubectl apply -f nginx_sts.yml
microk8s kubectl run -i --tty --image busybox:1.28 dns-test --restart=Never --rm
microk8s kubectl delete -f nginx_sts.yml
microk8s kubectl delete pvc www-web-0 www-web-1 www-web-2


Loaderのビルド
$ docker-compose build loader
$ docker tag simpleshard_loader localhost:32000/simpleshard_loader
$ docker push localhost:32000/simpleshard_loader
$ microk8s kubectl exec -it loader -- sh

https://kubernetes.io/ja/docs/reference/kubectl/cheatsheet/



# cpf merge always timeouts to configure shard cluster... maybe due to disk is too slow. Not sure.
# Since there is no way to change retry count, I'm using manual steps, instead.
# 05/11/21-16:32:07:832 (1226) 0 [Utility.Event] Attach attempt 8 of 10...
# 05/11/21-16:32:12:085 (1225) 0 [Database.SparseDBExpansion] Expanding capacity of sparse database /iris-mgr/IRIS_conf.d/mgr/iristemp/ by 10 MB.
# 05/11/21-16:32:12:858 (1226) 0 [Utility.Event] Attach attempt 9 of 10...
# 05/11/21-16:32:17:887 (1226) 2 [Utility.Event] Cannot attach data node to IRIS://data-0.iris:1972 at this time

    [Startup]
    ShardRole=AUTO
    ShardMasterRegexp=data-0.*
    ShardRegexp=data.*
    ShardClusterURL=IRIS://data-0.iris:1972

    [config]
    MaxServerConn=64
    MaxServers=64

Longhornのテスト

 $ microk8s kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/master/deploy/longhorn.yaml
 $ microk8s kubectl -n longhorn-system get pods
NAME                                       READY   STATUS    RESTARTS   AGE
longhorn-ui-5b864949c4-72qkz               1/1     Running   0          4m3s
longhorn-manager-wfpnl                     1/1     Running   0          4m3s
longhorn-driver-deployer-ccb9974d5-w5mnz   1/1     Running   0          4m3s
instance-manager-e-5f14d35b                1/1     Running   0          3m28s
instance-manager-r-a8323182                1/1     Running   0          3m28s
engine-image-ei-611d1496-qscbp             1/1     Running   0          3m28s
csi-attacher-5df5c79d4b-gfncr              1/1     Running   0          3m21s
csi-attacher-5df5c79d4b-ndwjn              1/1     Running   0          3m21s
csi-provisioner-547dfff5dd-pj46m           1/1     Running   0          3m20s
csi-resizer-5d6f844cd8-22dpp               1/1     Running   0          3m20s
csi-provisioner-547dfff5dd-86w9h           1/1     Running   0          3m20s
csi-resizer-5d6f844cd8-zn97g               1/1     Running   0          3m20s
csi-resizer-5d6f844cd8-8nmfw               1/1     Running   0          3m20s
csi-provisioner-547dfff5dd-pmwsk           1/1     Running   0          3m20s
longhorn-csi-plugin-xsnj9                  2/2     Running   0          3m19s
csi-snapshotter-76c6f569f9-wt8sh           1/1     Running   0          3m19s
csi-snapshotter-76c6f569f9-w65xp           1/1     Running   0          3m19s
csi-attacher-5df5c79d4b-gcf4l              1/1     Running   0          3m21s
csi-snapshotter-76c6f569f9-fjx2h           1/1     Running   0          3m19s

$ microk8s kubectl -n longhorn-system get svc
NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)     AGE
longhorn-backend    ClusterIP   10.152.183.82    <none>        9500/TCP    10m
longhorn-frontend   ClusterIP   10.152.183.42    <none>        80/TCP      10m
csi-attacher        ClusterIP   10.152.183.2     <none>        12345/TCP   9m51s
csi-provisioner     ClusterIP   10.152.183.41    <none>        12345/TCP   9m51s
csi-resizer         ClusterIP   10.152.183.229   <none>        12345/TCP   9m50s
csi-snapshotter     ClusterIP   10.152.183.105   <none>        12345/TCP   9m50s

On client PC (Windows 10)
C:\> ssh -L 8888:10.152.183.42:80 iwamoto@192.168.11.49
browser http://localhost:8888/


simple.ymlの下記を修正。mountPathを変更する理由は、memo-clone.txtに。

修正前    storageClassName: microk8s-hostpath
修正後    storageClassName: longhorn

修正前    - mountPath: /iris-mgr/IRIS_conf.d
修正後    - mountPath: /iris-mgr

$ microk8s kubectl apply -f simple.yml

回避策として、initContainersを追加する方法も検討。これでもうまくいく。

    spec:
      imagePullSecrets:
        - name: dockerhub-secret      
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: volume-mount-hack
        image: busybox
        command: ["sh", "-c", "chmod 755 /iris-mgr"]
        volumeMounts:
        - name: dbv-mgr
          mountPath: /iris-mgr
      containers:
      - args:
        - --key
        - /irissys/key/iris.key

この後、initContainersを消して、失敗させようとしたらなぜか正常動作した...。意味不明。
結局、理由はわからないまま。下記に戻して再発するまで様子を見る。
- mountPath: /iris-mgr